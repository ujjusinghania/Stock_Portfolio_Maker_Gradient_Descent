{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red0\green0\blue0;\red92\green38\blue153;
\red63\green110\blue116;\red170\green13\blue145;\red196\green26\blue22;\red46\green13\blue110;\red28\green0\blue207;
}
{\*\expandedcolortbl;;\csgenericrgb\c0\c45600\c0;\csgenericrgb\c0\c0\c0;\csgenericrgb\c35900\c14900\c60100;
\csgenericrgb\c24700\c43100\c45600;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c18100\c5200\c43100;\csgenericrgb\c11000\c0\c81000;
}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 /*\
 \
 Function that assists Batch Gradient Descent.\
 \
 Allows the user to pass in a .csv filename - the function reads data from the .csv file\
 and converts it into a vector<TrainingExample>, which can then be converted into a\
 Hypothesis.\
 \
 */\cf3 \
\
\cf4 vector\cf3 <\cf5 TrainingExample\cf3 > readDataFromFileIntoHypothesis(\cf6 const\cf3  \cf4 string\cf3 & fileName) \{\
    \cf4 ifstream\cf3  fileInput (fileName);\
    \
    \cf6 if\cf3  (!fileInput) \{\
        \cf4 cout\cf3  << \cf7 "Data from the file could not be read."\cf3  << \cf8 endl\cf3 ;\
        \cf8 exit\cf3 (\cf9 1\cf3 );\
    \}\
    \
    \cf4 vector\cf3 <\cf5 TrainingExample\cf3 > hypothesisData;\
    \cf4 vector\cf3 <\cf6 double\cf3 > dataValues;\
    \cf4 string\cf3  value = \cf7 ""\cf3 ;\
    \
    \cf2 // To check for Byte Order Mark (BOM).\cf3 \
    \
    \cf6 char\cf3  bomCheck[\cf9 4\cf3 ] = \{\cf9 0\cf3 \};\
    fileInput.\cf8 read\cf3 (bomCheck, \cf9 3\cf3 );\
    \cf6 if\cf3  (\cf8 strcmp\cf3 (bomCheck, \cf7 "\\xEF\\xBB\\xBF"\cf3 ) != \cf9 0\cf3 ) \{\
        fileInput.\cf8 seekg\cf3 (\cf9 0\cf3 );\
    \}\
    \
    \cf6 while\cf3  (fileInput >> value) \{\
        value = value + \cf7 ",end,"\cf3 ;\
        \cf4 string\cf3  tableValue;\
        \cf4 stringstream\cf3  ss = \cf4 stringstream\cf3 (value);\
        \cf6 while\cf3  (\cf8 getline\cf3 (ss, tableValue, \cf9 ','\cf3 )) \{\
            \cf6 if\cf3  (tableValue == \cf7 "end"\cf3 ) \{\
                \cf6 double\cf3  target = dataValues.\cf8 back\cf3 ();\
                dataValues.\cf8 pop_back\cf3 ();\
                \cf5 TrainingExample\cf3  dataExample = \cf5 TrainingExample\cf3 (dataValues, target);\
                hypothesisData.\cf8 push_back\cf3 (dataExample);\
                dataValues = \{\};\
                \cf6 continue\cf3 ;\
            \}\
            \
            \cf6 try\cf3  \{\
                dataValues.\cf8 push_back\cf3 (\cf8 stod\cf3 (tableValue));\
            \}\
            \cf6 catch\cf3  (\cf4 invalid_argument\cf3 ) \{\
                \cf4 cout\cf3  << \cf7 "Invalid"\cf3 ;\
                \cf6 continue\cf3 ;\
            \}\
        \}\
    \}\
    \cf6 return\cf3  hypothesisData;\
\}\
\

\f1\fs24 \cf0 \CocoaLigature1 int main()  \{\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 //    Data excelSheetNames;\cf3 \
\cf2 //    vector<CompanyForecast> listOfCompanies;\cf3 \
\cf2 //    for (size_t index = 0; index < excelSheetNames.CSVNames.size(); index++) \{\cf3 \
\cf2 //        vector<TrainingExample> trainingExamples = readDataFromFile(excelSheetNames.CSVNames[index]+".csv");\cf3 \
\cf2 //        Hypothesis mockCompany = Hypothesis(trainingExamples);\cf3 \
\cf2 //        cout << endl << endl << mockCompany << endl << endl;\cf3 \
\cf2 //        vector<double> theta = mockCompany.performGradientDescent();\cf3 \
\cf2 //        cout << endl << endl << endl;\cf3 \
\cf2 //    \cf3 \
\cf2 //        /*\cf3 \
\cf2 //        for (size_t thetaIndex = 0; thetaIndex < theta.size(); thetaIndex++) \{\cf3 \
\cf2 //            cout << showpos << theta[thetaIndex] << noshowpos << " * ";\cf3 \
\cf2 //        \}\cf3 \
\cf2 //        */\cf3 \
\cf2 //        \cf3 \
\cf2 //        listOfCompanies.push_back(CompanyForecast(theta, excelSheetNames.CSVNames[index]));\cf3 \
\cf2 //    \}\cf3 \
\cf2 //    \cf3 \
\cf2 //    vector<vector<double>> predictionData = readPredictionDataFromFile();\cf3 \
\cf2 //    \cf3 \
\cf2 //    for (size_t printIndex = 0; printIndex < listOfCompanies.size(); printIndex++) \{\cf3 \
\cf2 //        cout << listOfCompanies[printIndex] << endl << endl;\cf3 \
\cf2 //        cout << "Predicted Value: " << listOfCompanies[printIndex].returnCompanyForecast(predictionData[printIndex]);\cf3 \
\cf2 //        cout << "----------------------------------------" << endl << endl;\cf3 \
\cf2 //    \
\}}